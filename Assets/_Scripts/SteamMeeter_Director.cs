using System.Xml;
using System.IO;
using UnityEngine;
using UnityEngine.UI;
using Valve.VR;
using VoiceMeeter;
using Voicemeeter;

public class SteamMeeter_Director : MonoBehaviour
{
    private readonly string DEFAULTXMLPATH = Path.GetFullPath("default.xml");
    private readonly string VRXMLFILEPATH = Path.GetFullPath("vr.xml");
    private readonly string MANIFESTLFILEPATH = Path.GetFullPath("app.vrmanifest");
    private readonly float INCREMENTVALUE = 2;
    private readonly float DECREMENTVALUE = 2;
    private readonly string VAIOSTRIPPARAM = "Strip[5]";
    private readonly string AUXSTRIPPARAM = "Strip[6]";
    private readonly string VAIO3STRIPPARAM = "Strip[7]";

    public Unity_Overlay menuOverlay;

	[Space(10)]

	public Slider sliderVAIO = null;
    public Slider sliderAUX = null;
    public Slider sliderVAIO3 = null;

    [Space(10)]

    public Text sliderTitleVAIO = null;
    public Text sliderTitleAUX = null;
    public Text sliderTitleVAIO3 = null;

    [Space(10)]

    public Text sliderValueVAIO = null;
    public Text sliderValueAUX = null;
    public Text sliderValueVAIO3 = null;

    void Start() 
	{
        Remote.Initialize(RunVoicemeeterParam.VoicemeeterPotato);
        Reset();
    }

	public void OnApplicationQuit()
	{
        if (File.Exists(DEFAULTXMLPATH))
        {
            Remote.Load(DEFAULTXMLPATH);
        }
	}

    public void OnSteamVRConnect()
	{
        if (File.Exists(MANIFESTLFILEPATH))
        {
            OpenVR.Applications.AddApplicationManifest(MANIFESTLFILEPATH, false);
        }
    }

	public void OnSteamVRDisconnect()
	{
		Debug.Log("Quitting!");
		Application.Quit();
	}

    /// <summary>
    /// Escapes some illegal characters in an XML file.
    /// </summary>
    /// <param name="xmlpath">Full Path to the XML-file.</param>
    /// <returns>an xml string.</returns>
    private string GetEscapedXMLString(string xmlpath)
    {
        string xmlstring = File.ReadAllText(xmlpath);
        return xmlstring.Replace("&", "&amp;");
    }

    /// <summary>
    /// Loads an XML-file that was previously generated by Voicemeeters "Save" feature.
    /// </summary>
    /// <param name="xmlpath">Full Path to the XML-file.</param>
    private void LoadVMXML(string xmlpath)
    {
        Remote.Load(xmlpath);

        XmlDocument xml = new XmlDocument();
        xml.LoadXml(GetEscapedXMLString(xmlpath));

        XmlNodeList stripnodes = xml.DocumentElement.SelectNodes("VoiceMeeterParameters/Strip");
        foreach (XmlElement item in stripnodes)
        {
            string dblevel = item.GetAttribute("dblevel");
            if (dblevel != "")
            {
                switch (item.GetAttribute("index"))
                {
                    case "6":
                        sliderVAIO.value = float.Parse(dblevel);
                        break;
                    case "7":
                        sliderAUX.value = float.Parse(dblevel);
                        break;
                    case "8":
                        sliderVAIO3.value = float.Parse(dblevel);
                        break;
                }
            }
        }

        string slidertext1 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip1").InnerText;
        sliderTitleVAIO.text = slidertext1 != "" ? slidertext1 : sliderTitleVAIO.text;

        string slidertext2 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip2").InnerText;
        sliderTitleAUX.text = slidertext2 != "" ? slidertext2 : sliderTitleAUX.text;

        string slidertext3 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip3").InnerText;
        sliderTitleVAIO3.text = slidertext3 != "" ? slidertext3 : sliderTitleVAIO3.text;
    }

    /// <summary>
    /// Gets Slider Gain levels and Titles and sets them.
    /// </summary>
    private void SetSliders()
    {
        string slidertext1 = Remote.GetTextParameter(VAIOSTRIPPARAM + ".Label");
        sliderTitleVAIO.text = slidertext1 != "" ? slidertext1 : sliderTitleVAIO.text;

        string slidertext2 = Remote.GetTextParameter(AUXSTRIPPARAM + ".Label");
        sliderTitleAUX.text = slidertext2 != "" ? slidertext2 : sliderTitleAUX.text;

        string slidertext3 = Remote.GetTextParameter(VAIO3STRIPPARAM + ".Label");
        sliderTitleVAIO3.text = slidertext3 != "" ? slidertext3 : sliderTitleVAIO3.text;

        sliderVAIO.value = Remote.GetParameter(VAIOSTRIPPARAM + ".Gain");
        sliderAUX.value = Remote.GetParameter(AUXSTRIPPARAM + ".Gain");
        sliderVAIO3.value = Remote.GetParameter(VAIO3STRIPPARAM + ".Gain");
    }

    /// <summary>
    /// Resets the program.
    /// </summary>
    public void Reset()
    {
        if (File.Exists(VRXMLFILEPATH))
        {
            LoadVMXML(VRXMLFILEPATH);
        }
        else
        {
            SetSliders();
        }
    }
    
    /// <summary>
    /// Restarts the Voicemeeter Audio Engine
    /// </summary>
    public void Restart() => Remote.Restart();

    /// <summary>
    /// Sets VAIO Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetVAIOVolume(float value)
    {
        Remote.SetParameter(VAIOSTRIPPARAM + ".Gain", value);
        sliderValueVAIO.text = value.ToString("n1");
    }

    /// <summary>
    /// Sets AUX Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetAUXVolume(float value)
    {
        Remote.SetParameter(AUXSTRIPPARAM + ".Gain", value);
        sliderValueAUX.text = value.ToString("n1");
    }

    /// <summary>
    /// Sets VAIO3 Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetVAIO3Volume(float value)
    {
        Remote.SetParameter(VAIO3STRIPPARAM + ".Gain", value);
        sliderValueVAIO3.text = value.ToString("n1");
    }

    public void IncrementVAIOSlider() => sliderVAIO.value += INCREMENTVALUE;

    public void IncrementAUXSlider() => sliderAUX.value += INCREMENTVALUE;

    public void IncrementVAIO3Slider() => sliderVAIO3.value += INCREMENTVALUE;

    public void DecrementVAIOSlider() => sliderVAIO.value -= DECREMENTVALUE;

    public void DecrementAUXSlider() => sliderAUX.value -= DECREMENTVALUE;

    public void DecrementVAIO3Slider() => sliderVAIO3.value -= DECREMENTVALUE;
}
