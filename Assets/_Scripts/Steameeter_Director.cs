using System.Xml;
using System.IO;
using UnityEngine;
using UnityEngine.UI;
using Valve.VR;
using VoiceMeeter;
using Voicemeeter;
using IniParser;
using IniParser.Model;

public class Steameeter_Director : MonoBehaviour
{
    private readonly string MANIFESTLFILEPATH = Path.GetFullPath("app.vrmanifest");

    private string defaultXMLPath = Path.GetFullPath("default.xml");
    private string vrXMLPath = Path.GetFullPath("vr.xml");
    
    private float incrementValue = 2;
    private float decrementValue = 2;

    private int VAIOStripIndex = 5;
    private int AUXStripIndex = 6;
    private int VAIO3StripIndex = 7;

    public Unity_Overlay menuOverlay;

	[Space(10)]

	public Slider sliderVAIO;
    public Slider sliderAUX;
    public Slider sliderVAIO3;

    [Space(10)]

    public Text sliderTitleVAIO;
    public Text sliderTitleAUX;
    public Text sliderTitleVAIO3;

    [Space(10)]

    public Text sliderValueVAIO;
    public Text sliderValueAUX;
    public Text sliderValueVAIO3;

    private bool initialized = false;

    void Start() 
	{
        LoadConfig();
        if (File.Exists(MANIFESTLFILEPATH))
        {
            OpenVR.Applications.AddApplicationManifest(MANIFESTLFILEPATH, false);
        }
    }

	public void OnApplicationQuit()
	{
        if (initialized && File.Exists(defaultXMLPath))
        {
            Debug.Log("Loading:" + defaultXMLPath);
            Remote.Load(defaultXMLPath);
        }
        else
        {
            Debug.Log(defaultXMLPath + " not found! Continuing without it...");
        }
    }

    public void OnSteamVRConnect()
	{
        Debug.Log("Initializing");
        Remote.Initialize(RunVoicemeeterParam.VoicemeeterPotato);
        Reset();
        initialized = true;
    }

	public void OnSteamVRDisconnect()
	{
		Debug.Log("Quitting!");
        Application.Quit();
	}

    private void LoadConfig()
    {
        var parser = new FileIniDataParser();
        IniData config = parser.ReadFile(Path.GetFullPath("config.ini"));

        defaultXMLPath = config["Settings"]["XMLPath_Default"].ToString();
        if (!Path.IsPathRooted(defaultXMLPath))
        {
            defaultXMLPath = Path.GetFullPath(defaultXMLPath);
        }

        vrXMLPath = config["Settings"]["XMLPath_VR"].ToString();
        if (!Path.IsPathRooted(vrXMLPath))
        {
            vrXMLPath = Path.GetFullPath(vrXMLPath);
        }

        incrementValue = int.Parse(config["Settings"]["IncrementValue"]);
        decrementValue = int.Parse(config["Settings"]["DecrementValue"]);

        VAIOStripIndex = int.Parse(config["Settings"]["StripIndex_VAIO"]);
        AUXStripIndex = int.Parse(config["Settings"]["StripIndex_AUX"]);
        VAIO3StripIndex = int.Parse(config["Settings"]["StripIndex_VAIO3"]);
    }

    /// <summary>
    /// Escapes some illegal characters in an XML file.
    /// </summary>
    /// <param name="xmlpath">Full Path to the XML-file.</param>
    /// <returns>an xml string.</returns>
    private string GetEscapedXMLString(string xmlpath)
    {
        string xmlstring = File.ReadAllText(xmlpath);
        return xmlstring.Replace("&", "&amp;");
    }

    /// <summary>
    /// Loads an XML-file that was previously generated by Voicemeeters "Save" feature.
    /// </summary>
    /// <param name="xmlpath">Full Path to the XML-file.</param>
    private void LoadVMXML(string xmlpath)
    {
        Debug.Log("Loading:" + xmlpath);
        Remote.Load(xmlpath);

        XmlDocument xml = new XmlDocument();
        xml.LoadXml(GetEscapedXMLString(xmlpath));

        XmlNodeList stripnodes = xml.DocumentElement.SelectNodes("VoiceMeeterParameters/Strip");
        foreach (XmlElement item in stripnodes)
        {
            string dblevel = item.GetAttribute("dblevel");
            if (dblevel != "")
            {
                int index = int.Parse(item.GetAttribute("index")) - 1;
                if(index == VAIOStripIndex)
                {
                    sliderVAIO.value = float.Parse(dblevel);
                }
                else if (index == AUXStripIndex)
                {
                    sliderAUX.value = float.Parse(dblevel);
                }
                else if (index == VAIO3StripIndex)
                {
                    sliderVAIO3.value = float.Parse(dblevel);
                }
            }
        }

        string slidertext1 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip1").InnerText;
        sliderTitleVAIO.text = slidertext1 != "" ? slidertext1 : sliderTitleVAIO.text;

        string slidertext2 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip2").InnerText;
        sliderTitleAUX.text = slidertext2 != "" ? slidertext2 : sliderTitleAUX.text;

        string slidertext3 = xml.DocumentElement.SelectSingleNode("VoiceMeeterParameters/LabelVirtualStrip3").InnerText;
        sliderTitleVAIO3.text = slidertext3 != "" ? slidertext3 : sliderTitleVAIO3.text;
    }

    /// <summary>
    /// Gets Slider Gain levels and Titles and sets them.
    /// </summary>
    private void SetSliders()
    {
        string slidertext1 = Remote.GetTextParameter(string.Format("Strip[{0}].Label", VAIOStripIndex));
        sliderTitleVAIO.text = slidertext1 != "" ? slidertext1 : sliderTitleVAIO.text;

        string slidertext2 = Remote.GetTextParameter(string.Format("Strip[{0}].Label", AUXStripIndex));
        sliderTitleAUX.text = slidertext2 != "" ? slidertext2 : sliderTitleAUX.text;

        string slidertext3 = Remote.GetTextParameter(string.Format("Strip[{0}].Label", VAIO3StripIndex));
        sliderTitleVAIO3.text = slidertext3 != "" ? slidertext3 : sliderTitleVAIO3.text;

        sliderVAIO.value = Remote.GetParameter(string.Format("Strip[{0}].Gain", VAIOStripIndex));
        sliderAUX.value = Remote.GetParameter(string.Format("Strip[{0}].Gain", AUXStripIndex));
        sliderVAIO3.value = Remote.GetParameter(string.Format("Strip[{0}].Gain", VAIO3StripIndex));
    }

    /// <summary>
    /// Resets the program.
    /// </summary>
    public void Reset()
    {
        if (File.Exists(vrXMLPath))
        {
            LoadVMXML(vrXMLPath);
        }
        else
        {
            Debug.Log(vrXMLPath + " not found! Continuing without it...");
            SetSliders();
        }
    }
    
    /// <summary>
    /// Restarts the Voicemeeter Audio Engine
    /// </summary>
    public void Restart() => Remote.Restart();

    /// <summary>
    /// Sets VAIO Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetVAIOVolume(float value)
    {
        Remote.SetParameter(string.Format("Strip[{0}].Gain", VAIOStripIndex), value);
        sliderValueVAIO.text = value.ToString("n1");
    }

    /// <summary>
    /// Sets AUX Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetAUXVolume(float value)
    {
        Remote.SetParameter(string.Format("Strip[{0}].Gain", AUXStripIndex), value);
        sliderValueAUX.text = value.ToString("n1");
    }

    /// <summary>
    /// Sets VAIO3 Volume Remotely.
    /// </summary>
    /// <param name="value">value to set</param>
    public void SetVAIO3Volume(float value)
    {
        Remote.SetParameter(string.Format("Strip[{0}].Gain", VAIO3StripIndex), value);
        sliderValueVAIO3.text = value.ToString("n1");
    }

    public void IncrementVAIOSlider() => sliderVAIO.value += incrementValue;

    public void IncrementAUXSlider() => sliderAUX.value += incrementValue;

    public void IncrementVAIO3Slider() => sliderVAIO3.value += incrementValue;

    public void DecrementVAIOSlider() => sliderVAIO.value -= decrementValue;

    public void DecrementAUXSlider() => sliderAUX.value -= decrementValue;

    public void DecrementVAIO3Slider() => sliderVAIO3.value -= decrementValue;
}
